Fortran tips
============

General Fortran guidelines as used in EMEP/ESX work. 

Implicit none
-------------

Use this *always* !
Place at the top of the module (see example below), and it will prevent very common mistakes due to mistyping, etc.



Modules
--------

The aim is to use modern fortran, with modules as the central unit.  Modules should make more explicit use of public/private, to stop variables being "exposed" by accident to calling routines,  e.g.::

  module Example
    use AAA, only : a,b,c     ! Now we know that AAA is only used to get a,b and c
    use BBB                   ! Here get everything which is public in BBB. Best avoided
    implicit none
    private                   ! ** default is private ** for safety
  
    public :: subroutine1     ! Make public for others to use
    private :: mysubroutine   ! Make private if not needed outside this module

    real, public, save          :: value = 1.2  
    integer, private, parameter :: MYMAX = 20

  contains
  .....


This use of 'only' also makes it much easier to see where variables are coming from. As
a more realistic example::

   use Zmet, only : KARMAN

lets the reader know where the variables KARMAN is coming from, without having to trudge through many thousands of lines of code in multiple files.


Modules also give the compiler much more information on the arguments to subroutines and dimensions of arrays. All of this helps to minimise errors in the code.

In general, try to code 'module-oriented'. The modules should be individual entities; Your routines should still behave properly after any modification of other parts of the code.  Conversely: it should be possible to modify your routine without having to change also other parts of the code.

However this rule is much more difficult to apply than the other rules :-(


Documention
------------

    Write the code assuming that the next person to work with it will
    be there long after you are gone, is fairly new to programming,
    and very new to this model. In many cases this assumption will
    be fulfilled!

'use only', intent()
---------------------

    Much of the code is in modules. Access variables and routines with the *use only* construct as far as possible - this makes it easier to spot where variables are coming from and is safer.

    For subroutine arguments, use the *intent* attribute always: intent(in), intent(out), or intent(inout).   This is a great aid for the compiler and the reader!


    Put all 'use only' constructs at the top of each module, rather than at the top of each subroutine or function within the module. This makes it easy to get an overview of the module dependencies.

Lines and characters
---------------------

  Use spaces, not tabs. 

  Don't use lines which are longer than 78 characters. These wrap around and tend to mess up your nicely formatted and indented code :-)

  Use UPPER CASE for PARAMETERS, lower case for other variables.  Should keep C-programmers happy also.

  Use variable-names which are descriptive! Do not try to save typing by omitting vowels! Thus, w d nt wrt lk ths, but rather we write like this.

  Remember, longer-names are also easier to search for. Thus, 'grep GRAV \*.f95' will now give a useful listing of the places where gravity occurs, whereas 'grep g \*.f95' will produce a rather longer and less useful output. Easier to find in vi or emacs too.

  Use < and > instead of .lt. and .gt.. Clearer and shorter!

  Do not use  'l' or 'll' as variable names - they are too easily confused with 1 and 11 in print-outs.



Avoid
-----

The classical advice:

    goto statements

    common-blocks (*never*, *no-way*, these are 100.000% forbidden!)

    include files.

Occassionally goto and include files are useful,  and indeed the EMEP and ESX models make use of include files for the reaction mechanism (since that is generated by a pre-processor). Still, try to avoid. 



