#!/bin/bash
# Script to prepare CM_ files for Unimod
#
# 1) RUns GenChem to get chemical mechanism
# 2) Copies Boundary Condition files
# 3) Run GenVOC to get speciation
#
#====== Set run here =======================
#run=Test03   # CRI_v2_R5
#run=EmChem03c   # CRI_v2_R5
#run=OSRM    # CRI_v2_R5
#run=Eucaari_Trends
#run=CRI_v2_R5
#
# ==========================================
# functions
function cp_if_diff() {
	diff $1 $2 > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "cp $1 $2"
		cp $1 $2
	fi
}

# ==========================================
# Must specify source of biomass-burning
ffires=FINNv1  # Can be FINNv1, the other option (GFED) may not be working properly!
# Construct GenIn.species and GenIn.reactions from wanted sub-sets:

#Specify chemical setup. Needs to have associated ZCM_ file, but can use specs
# and reactions from any existing ZCM.
#run=CB05
run=CRI_v2_R5
run=CB05
run=EmChem09
run=CRI_v2_R5
run=EmChem09soa

# Some species which can be common to most schemes are
# treated here. Also, these are usually not needed for
# SR runs (they don't affect other compounds), so we can
# easily skip them
xdir=$PWD/ZCM_EmChem09 # has some common extra files, e.g. seasalt & dust
extras=( $xdir/SeaSalt $xdir/Dust  $xdir/Pollen )  # Experimental inc. pollen
extras=( ) #   Minimum set!
extras=( $xdir/SeaSalt $xdir/Dust $xdir/Isotopes ) #  Standard(?)

# Variables for HELP & GETOPTS functions
ERGO=`basename $0`
VERB='off';[[ "$*" = *-q* ]] && VERB='quiet';[[ "$*" = *-v* ]] && VERB='on'
[[ "$VERB" = 'on' ]] && echo -e "$ERGO verbose mode: $VERB"
# Print ussage & exits
HELP(){
  local EE=`echo ${extras[*]#*ZCM_}|tr ' ' ','` \
        VV=`echo ${volcan[*]#*ZCM_}|tr ' ' ','` \
        PP=`echo ${nucppa[*]#*ZCM_}|tr ' ' ','` \
        XX=`echo ${nucexp[*]#*ZCM_}|tr ' ' ','`
  cat << _EOF
'$ERGO' prepare Chemestry files (CM_.f90) for Unimod

Usage:
  $ERGO [-h] [-v] [-q] [-f fire] [-r run] [-e extra1[,extra2[...]]]
        [-V volc1,[,volc2[...]]] [-N npp1,[,npp2[...]]] [-X nuc1,[,nuc2[...]]]

Examples:
# EMEP GenChmem standard setup assumed in \`make EMEP\`
  mk.GenChmem -r EmChem09soa -e SeaSalt,Dust,Isotopes -f FINNv1
# MACC GenChmem standard setup assumed in \`make MACC\`
  mk.GenChmem -r EmChem09soa -e SeaSalt,Dust,Isotopes -f GFED
# eEMEP GenChmem standard setup assumed in \`make eEMEP\`
  mk.GenChem -r Emergency -f FINNv1 -e none -V 7bin,Vesuvius,Etna,Kr.suv.Â­k,Katla,Askja
# Testing CRI_v2_R5, no extras
  mk.GenChmem -r CRI_v2_R5 -e none

Options:
  -h        Print this help and exits
  -v        Turns on verbose mode  (currently: $VERB)
  -q        Quiet mode. No GenChem.pl chatter.
  -f ffire  Sets \$ffires variable (currently: $ffires)
  -r run    Sets \$run variable    (currently: $run)
  -e extras Sets \$extras variable (currently: ${EE:-'none'})
  -V volc   Sets \$volcan variable (currently: ${VV:-'none'})
  -N npp    Sets \$nucppa variable (currently: ${PP:-'none'})
  -X nuc    Sets \$nucexp variable (currently: ${XX:-'none'})
_EOF
  (( $# )) && echo -e "\nCurrent call:\n\t$ERGO $*"
  exit 1
}
# Processes command line options. Option -h for help
GETOPTS(){
  local rdir=$PWD/ZCM_$run N=0 EE=()
# Volcano variables
  local vdir=$PWD/ZCM_Emergency
  local VolcCSV=$vdir/Mastin_et_al_2009a_table3.csv \
        ErupCSV=$vdir/Mastin_et_al_2009b_table3.csv \
        NppCSV=$vdir/NPP_Location.csv       NacCSV=$vdir/NPP_Accident.csv \
        NucCSV=$vdir/NUC_Location.csv       NexCSV=$vdir/NUC_Explosion.csv \
        LocCSV=$vdir/emergency_location.csv EmiCSV=$vdir/emergency_emission.csv \
        COL='1,5-6,8-9,11-14,16' vbin=7bin tracer='1234-67=|PP34L678'
# 1:NUMBER,5:NAME,6:LOCATION,8:LATITUDE,9:NS,11:LONGITUDE,12:EW,13:ELEV,14:TYPE,16:ERUPTION TYPE
  [[ "$*" = *-[VNX]* ]] && rm -f $LocCSV $EmiCSV
  while getopts ":f:r:e:V:N:X:qvh" OPT; do
    [[ "$VERB" = 'on' ]] && echo -e "Processing option:\n\t-$OPT '$OPTARG'"
    case "$OPT" in
    f)ffires=$OPTARG;;
    r)run=$OPTARG;rdir=$PWD/ZCM_$run;
      [[ -d $rdir ]] || HELP $* "\nUnknown run option:\n\t-$OPT $OPTARG";;
    e)extras=( );EE=( )
      [[ "$OPTARG" = \-* ]] || [[ "$OPTARG" = none ]] || EE=( ${OPTARG//,/ } )
      for N in ${!EE[*]};do
        extras[$N]=${EE[$N]}
        [[ -s ${extras[$N]}.species ]] || extras[$N]=$PWD/${EE[$N]}
        [[ -s ${extras[$N]}.species ]] || extras[$N]=$rdir/${EE[$N]}
        [[ -s ${extras[$N]}.species ]] || extras[$N]=$xdir/${EE[$N]}
        [[ -s ${extras[$N]}.species ]] ||
          HELP $* "\nUnknown extras option:\n\t-$OPT ${EE[$N]}"
      done;;
    V)volcan=( );EE=( )
      [[ "$OPTARG" = \-* ]] || [[ "$OPTARG" = none ]] || EE=( ${OPTARG//,/ } )
      for N in ${!EE[*]};do
        [[ "${EE[$N]}" = *bin ]] && vbin="${EE[$N]}" && unset EE[$N]
      done
      case $vbin in
      2bin|7bin)echo "Volcano $vbin configuration";;
              *)HELP $* "\nUnknown volcano option:\n\t-$OPT $vbin";;
      esac
      # cut     selects columns from $VolcCSV
      # sed     replaces '-' & '=' in Volcano NUMBER and remove blanks
      grep '^# '      "$VolcCSV"|tee -a $LocCSV                  # Source info
      grep '^#NUMBER' "$VolcCSV"|cut -d',' -f$COL|tee -a $LocCSV # Headers
      cat "$ErupCSV" >> $EmiCSV
      for N in ${!EE[*]};do
        tracer=`grep -iE ${EE[$N]/./'.{1,2}'} "$VolcCSV"|cut -d',' -f$COL|
        sed 's/^\(....\)-/\1A/g;s/^\(....\)=/\1B/g;s/^\(.......\)-/\1A/g;s/^\(.......\)=/\1B/g;s/^/V/g;s/, */,/g;'` # Volcano description
        [[ -n "$tracer" ]] ||
          HELP $* "\nUnknown volcano option:\n\t-$OPT ${EE[$N]}"
        echo "$tracer"|tee -a $LocCSV
        tracer="${tracer%%,*}"                                  # Tracer name
        volcan[$N]=$rdir/ASH$tracer
        sed "s/_ASH_/$tracer/g;" $vdir/ASH_$vbin.species   > ${volcan[$N]}.species
        sed "s/_ASH_/$tracer/g;" $vdir/ASH_$vbin.reactions > ${volcan[$N]}.reactions
        [[ -s $vdir/${tracer}_$vbin.eruptions ]] && cat $vdir/${tracer}_$vbin.eruptions >> $LocCSV
      done;;
    N)nucppa=( );EE=( )
      [[ "$OPTARG" = \-* ]] || [[ "$OPTARG" = none ]] || EE=( ${OPTARG//,/ } )
      # cut     selects columns from $NppCSV
      # sed     replaces '-' & '=' in NPP NUMBER and remove blanks
      grep '^# '      "$NppCSV"|tee -a $LocCSV                   # Source info
      grep '^#NUMBER' "$NppCSV"|cut -d',' -f1-10|tee -a $LocCSV  # Headers
      cat "$NacCSV" >> $EmiCSV
      for N in ${!EE[*]};do
        tracer=`grep -iE ${EE[$N]/./'.{1,2}'} "$NppCSV"|cut -d',' -f1-10|
        sed 's/^\(....\)-/\1A/g;s/^\(....\)=/\1B/g;s/^\(.......\)-/\1A/g;s/^\(.......\)=/\1B/g;s/^/N/g;s/, */,/g;'` # NPP description
        [[ -n "$tracer" ]] ||
          HELP $* "\nUnknown npp option:\n\t-$OPT ${EE[$N]}"
        echo "$tracer"|tee -a $LocCSV
        tracer="${tracer%%,*}"                                  # Tracer name
        nucppa[$N]=$rdir/NPP$tracer
        sed "s/_NPP_/$tracer/g;" $vdir/NPP.species   > ${nucppa[$N]}.species
        sed "s/_NPP_/$tracer/g;" $vdir/NPP.reactions > ${nucppa[$N]}.reactions
        [[ -s $vdir/$tracer.accident ]] && cat $vdir/$tracer.accident >> $EmiCSV
      done;;
    X)nucexp=( );EE=( )
      [[ "$OPTARG" = \-* ]] || [[ "$OPTARG" = none ]] || EE=( ${OPTARG//,/ } )
      # cut     selects columns from $NppCSV
      # sed     replaces '-' & '=' in NPP NUMBER and remove blanks
      grep '^# '      "$NucCSV"|tee -a $LocCSV                   # Source info
      grep '^#NUMBER' "$NucCSV"|cut -d',' -f1-10|tee -a $LocCSV  # Headers
      cat "$NexCSV" >> $EmiCSV
      for N in ${!EE[*]};do
        tracer=`grep -iE ${EE[$N]/./'.{1,2}'} "$NucCSV"|cut -d',' -f1-10|
        sed 's/^\(....\)-/\1A/g;s/^\(....\)=/\1B/g;s/^\(.......\)-/\1A/g;s/^\(.......\)=/\1B/g;s/^/X/g;s/, */,/g;'` # NPP description
        [[ -n "$tracer" ]] ||
          HELP $* "\nUnknown npp option:\n\t-$OPT ${EE[$N]}"
        echo "$tracer"|tee -a $LocCSV
        tracer="${tracer%%,*}"                                  # Tracer name
        nucexp[$N]=$rdir/NUC$tracer
        sed "s/_NUC_/$tracer/g;" $vdir/NUC.species   > ${nucexp[$N]}.species
        sed "s/_NUC_/$tracer/g;" $vdir/NUC.reactions > ${nucexp[$N]}.reactions
        [[ -s $vdir/$tracer.explosion ]] && cat $vdir/$tracer.explosion >> $EmiCSV
      done;;
  q|v);;
    h)HELP $*;;
    *)HELP $* "\nUnknown $ERGO option:\n\t-$OPT $OPTARG" ;;
    esac
  done
  emergency=( ${volcan[@]} ${nucppa[@]} ${nucexp[@]} )
};GETOPTS $* #-vh

if [ $run == EmChem09 ]; then
  echo "RUN EmChem09 chosen"
  spcs=( EmChem09base PMmass ${emergency[@]} )
  rcns=( EmChem09base PMmass ${emergency[@]} )
  bics=( EmChem09base )

elif [ $run == EmChem09soa ]; then
  echo "RUN EmChem09soa chosen. Remember to cp ZD_VBS/My_SOA_ml.f90!!"
  spcs=( $xdir/EmChem09base ${emergency[@]} \
         ../ZCM_vbs_tests/VBS_help    \
          ./VBS_nonvolatile ../ZCM_vbs_tests/VBS_partitioning )  #  VBS NPNA
  rcns=( $xdir/EmChem09base ${emergency[@]} \
         ../ZCM_vbs_tests/VBS_SOAformation ../ZCM_vbs_tests/VBS_SOAageing \
          ./VBS_emissions_nonvolatilePOA_FromPM25  ) # VBS NPNA
  bics=( $xdir/EmChem09base )  # No special SOA BICs (yet)

elif [ $run == CRI_v2_R5 ]; then
  echo "RUN CRI_v2_R5 chosen"
  spcs=( CRI_v2_R5base $xdir/PMmass )
  rcns=( CRI_v2_R5base $xdir/PMmass )
  bics=( CRI_v2_R5base )

elif [ $run == CRI_v2_0  ]; then
  echo "RUN CRI_v2_0  chosen"
  spcs=( CRI_v2_0base $xdir/PMmass )
  rcns=( CRI_v2_0base $xdir/PMmass )
  bics=( CRI_v2_0base )

elif [ $run == CB05 ]; then
  echo "RUN CB05 chosen"
  spcs=( CB05base $xdir/PMmass )
  rcns=( CB05base $xdir/PMmass )
  bics=( CB05base )

elif [ $run == CB04 ]; then
  echo "RUN CB04 chosen"
  spcs=( CB04base $xdir/PMmass )
  rcns=( CB04base $xdir/PMmass )

elif [ $run == OSRM ]; then
  echo "RUN OSRM chosen"
  spcs=( OSRMbase $xdir/PMmass )
  rcns=( OSRMbase $xdir/PMmass )

elif [ $run == Emergency ]; then
  echo "RUN Emergency chosen"
  spcs=( $xdir/EmChem09base $xdir/PMmass ${emergency[@]})
  rcns=( $xdir/EmChem09base $xdir/PMmass ${emergency[@]})
  bics=( $xdir/EmChem09base )
 #extras=()

else
  echo "SELECTION of run $run failed!! "
  exit
fi

# Add the usual common stuff
spcs=("${spcs[@]}" "${extras[@]}")
rcns=("${rcns[@]}" "${extras[@]}")
bics=("${bics[@]}" "${extras[@]}")

echo "NEW SPECS ", ${spcs[@]}
echo "NEW REACTIONS ", ${rcns[@]}

#VBS
#run=vbs_tests   # VBS based Organic Aerosol Model, different versions use different spcs and rcns, choose one set below
#ALSO YOU NEED TO MODIFY ZD_VBS/My_SOA_ml.f90 to work with the research versions of the VBS code (except the NPNA version that probably works with an unmodified version of ZD_VBS/My_SOA_ml.f90

#VBS NPAS (Nonvolatile POA, VBS for SOA formation and aging of SOA) Try using the "standard" EmChem09soa instead!!
#  spcs=( ../ZCM_EmChem09/EmChem09base ../ZCM_EmChem09/SeaSalt \
#         ../ZCM_EmChem09/Dust ../ZCM_vbs_tests/VBS_help_Detailed \
#         ./VBS_nonvolatile ../ZCM_vbs_tests/VBS_partitioning_Detailed )  #  VBS NPNA
#  rcns=( ../ZCM_EmChem09/EmChem09base ../ZCM_EmChem09/SeaSalt \
#         ../ZCM_vbs_tests/VBS_SOAformation_Detailed ../ZCM_vbs_tests/VBS_SOAageing_Detailed \
#         ./VBS_emissions_nonvolatilePOA  ) # VBS NPNA


# VBS-PAA (VBS based primary emissions and aging of all POA and SOA)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS PAA
#rcns=( ../ZCM_EmChem09/EmChem09base VBS_SOAformation_Detailed VBS_POAageing VBS_SOAageing_Detailed VBS_emissions_partitioningPOA  ) # VBS PAA

# VBS PAP (VBS based primary emissions and aging of all POA)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS PAP
#rcns=( ../ZCM_EmChem09/EmChem09base VBS_SOAformation_Detailed VBS_POAageing VBS_emissions_partitioningPOA  ) # VBS PAP

# VBS PAPA (VBS based primary emissions and aging of all POA and ASOA, note! not same ageing rate as in VBS PAA!)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS PAPA
#rcns=( ../ZCM_EmChem09/EmChem09base VBS_SOAformation_Detailed VBS_POAageing VBS_ASOAageing VBS_emissions_partitioningPOA  ) # VBS PAPA

#VBS NPNA (VBS for SOA formation, no ageing reactions and only nonvolatile POA)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS NPNA
#rcns=( ../ZCM_EmChem09/EmChem09base  VBS_SOAformation_Detailed VBS_emissions_nonvolatilePOA  ) # VBS NPNA

#---------------- create GenIn files...
cdir=$PWD       #  Current when starting. Assumed now as a Unimod
wdir=$PWD/ZCM_$run   # work-directory, with input files
cd $wdir
#
mv GenIn.species GenIn.species.bk # Safety
echo "Species Files:" > CM_chempackages.txt
for FF in ${spcs[@]}; do
  if [[ -s $FF.species ]];then
    echo "+ SPECIES  FILE" $FF
  echo -n " $spec" >> CM_chempackages.txt
    cat $FF.species  >> GenIn.species
  fi
done
echo " " >> CM_chempackages.txt

# Reactions
mv GenIn.reactions GenIn.reactions.bk
echo "Reaction Files:" >> CM_chempackages.txt

for FF in ${rcns[@]}; do
  if [[ -s $FF.reactions ]];then
    echo "+ REACTION FILE" $FF
  echo -n " $reac" >> CM_chempackages.txt
    cat $FF.reactions >> GenIn.reactions
  fi
done
echo " " >> CM_chempackages.txt
# ==========================================
#FEB2012:
echo "!---- Boundary conditions -------" >  CM_BoundaryConditions.inc
for FF in ${bics[@]}; do
  if [[ -s $FF.BoundaryConditions ]];then
    echo "+ BIC FILE" $FF
  echo "!---- SECTION BICs $bic" >> CM_BoundaryConditions.inc
    cat $FF.BoundaryConditions     >> CM_BoundaryConditions.inc
  fi
done
echo " " >> CM_BoundaryConditions.inc.txt
# ==========================================

#GenSort.pl $run   # Creates GenIn.species, so be careful !#

# 1) Runs GenChem to get chemical mechanism
#######################################################################

if [[ "$VERB" = 'quiet' ]];then
  $cdir/GenChem.pl >/dev/null 2>&1
else
  $cdir/GenChem.pl
fi

# Mar 17th 2009, added fake GenSpec_bgn_ml

#odir=$PWD/ZCM_$run   # We keep output in work-directory
odir=$wdir           # We keep output in work-directory
echo $odir

cat GenOut_ChemRates*_ml.inc            > $odir/CM_ChemRates_ml.f90
cat GenOut_Chem{Spec*,Chemicals}_ml.inc > $odir/CM_ChemSpecs_ml.f90
cat GenOut_ChemGroups_ml.f90            > $odir/CM_ChemGroups_ml.f90

# ../DUMMY_Spec_bgn_ml \

#mv GenOut_SOA_ml.f90 $odir/CM_SOA_ml.f90
#mv ChemSOA_ml.f90 $odir/CM_SOA_ml.f90

mv GenOut_AerExt.inc      $odir/CM_AerExt.inc
mv GenOut_Reactions1.inc  $odir/CM_Reactions1.inc
mv GenOut_Reactions2.inc  $odir/CM_Reactions2.inc
mv GenOut_DryDep.inc      $odir/CM_DryDep.inc
mv GenOut_EmisSpecs.inc   $odir/CM_EmisSpecs.inc
mv GenOut_EmisBioNat.inc  $odir/CM_EmisBioNat.inc
mv GenOut_EmisFile.inc    $odir/CM_EmisFiles.inc
mv GenOut_WetDep.inc      $odir/CM_WetDep.inc

#rm GenOut_*                # Clean up current directory
#mv Log.GenOut  $odir/Log.$run

for i in $odir/CM*; do
	filename=`basename $i`
    cp_if_diff $i $cdir/$filename
done
#FEB2012 cp $odir/SAFE.CM_BoundaryConditions.inc $cdir/CM_BoundaryConditions.inc  # Special
# FINNv1 or GFED:
cp_if_diff $odir/BiomassBurning_${ffires}_to_$run.inc $cdir/BiomassBurningMapping.inc  # Special
cd $cdir

# Skipped now:
# 2) Copies Boundary Condition files
#######################################################################
# This file needs creating by hand
#cp BoundaryConditions.$run   $odir/CM_BoundaryConditions.inc

# 3) Run GenVOC to get speciation
#######################################################################
#Now done by Garry
#cd ..
#GenVOC.pl $run
