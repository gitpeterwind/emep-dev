#!/bin/bash
# Script to prepare CM_ files for Unimod
#
# 1) RUns GenChem to get chemical mechanism
# 2) Copies Boundary Condition files
# 3) Run GenVOC to get speciation
#
#====== Set run here =======================
#run=Test03   # CRI_v2_R5
#run=EmChem03c   # CRI_v2_R5
#run=OSRM    # CRI_v2_R5
#run=Eucaari_Trends
#run=CRI_v2_R5
#
# ==========================================
# functions
function cp_if_diff() {
  diff $1 $2 > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "cp $1 $2"
    cp $1 $2
  fi
}

# ==========================================
# Must specify source of biomass-burning
ffires=FINNv1.5  # Can be FINNv1, the other option (GFED) may not be working properly!
#ffires=FINNv1  # Can be FINNv1, the other option (GFED) may not be working properly!
# Construct GenIn.species and GenIn.reactions from wanted sub-sets:

#Specify chemical setup. Needs to have associated ZCM_ file, but can use specs
# and reactions from any existing ZCM.
#run=CB05
run=CRI_v2_R5
run=CB05
run=CRI_v2_R5
run=EmChem09
run=EmChem09soa
run=CRIv2R5jpc # April 2017
run=EmChem16a  # new default, Feb 2018, Still some testing
#run=EmChem09ecom # for G20
Aero=" "     # for Riemer, VOLFAC etc.
Aero="Aero2015"     # for Riemer, VOLFAC etc.

# Some species which can be common to most schemes are
# treated here. Also, these are usually not needed for
# SR runs (they don't affect other compounds), so we can
# easily skip them
xdir=$PWD/ZCM_EmChem09 # has some common extra files, e.g. seasalt & dust
extras=( $xdir/SeaSalt $xdir/Dust  $xdir/Pollen )  # Experimental inc. pollen
extras=( ) #   Minimum set!
extras=( $xdir/SeaSalt $xdir/Dust $xdir/Isotopes ) #  Standard(?)

# Variables for HELP & GETOPTS functions
ERGO=`basename $0`
VERB='off';[[ "$*" = *-q* ]] && VERB='quiet';[[ "$*" = *-v* ]] && VERB='on'
[[ "$VERB" = 'on' ]] && echo -e "$ERGO verbose mode: $VERB"
# Print ussage & exits
HELP(){
  local EE=`tr ' ' ',' <<< "${extras[*]#*ZCM_}"`
  cat << _EOF
'$ERGO' prepare Chemestry files (CM_.f90) for Unimod

Usage:
  $ERGO [-h] [-v] [-q] [-f fire] [-r run] [-e extra1[,extra2[...]]]

Examples:
# EMEP GenChmem standard setup assumed in \`make EMEP\`
  mk.GenChmem -r EmChem09soa -e SeaSalt,Dust,Isotopes -f FINNv1
# MACC GenChmem standard setup assumed in \`make MACC\`
  mk.GenChmem -r EmChem09soa -e SeaSalt,Dust,Isotopes -f GFED
# eEMEP GenChmem standard setup assumed in \`make eEMEP\`
  ZCM_Emergency/mk.Emergency  -V 7bin,Vesuvius,Etna,Kr.suv.Â­k,Katla,Askja
  mk.GenChem -r Emergency -f FINNv1 -e none
# Testing CRI_v2_R5, no extras
  mk.GenChmem -r CRI_v2_R5 -e none

Options:
  -h        Print this help and exits
  -v        Turns on verbose mode  (currently: $VERB)
  -q        Quiet mode. No GenChem.pl chatter.
  -f ffire  Sets \$ffires variable (currently: $ffires)
  -r run    Sets \$run variable    (currently: $run)
  -e extras Sets \$extras variable (currently: ${EE:-'none'})
_EOF
  (( $# )) && echo -e "\nCurrent call:\n\t$ERGO $*"
  exit 1
}
# Processes command line options. Option -h for help
GETOPTS(){
  local rdir=$PWD/ZCM_$run N=0
  while getopts ":f:r:e:qvh" OPT; do
    [[ "$VERB" = 'on' ]] && echo -e "Processing option:\n\t-$OPT '$OPTARG'"
    case "$OPT" in
    f)ffires=$OPTARG;;
    r)run=$OPTARG;rdir=$PWD/ZCM_$run;
      [[ -d $rdir ]] || HELP $* "\nUnknown run option:\n\t-$OPT $OPTARG";;
    e)extras=( );EE=( )
      [[ "$OPTARG" = \-* ]] || [[ "$OPTARG" = none ]] || EE=( ${OPTARG//,/ } )
      for N in ${!EE[*]};do
        extras[$N]=${EE[$N]}
        [[ -s ${extras[$N]}.species ]] || extras[$N]=$PWD/${EE[$N]}
        [[ -s ${extras[$N]}.species ]] || extras[$N]=$rdir/${EE[$N]}
        [[ -s ${extras[$N]}.species ]] || extras[$N]=$xdir/${EE[$N]}
        [[ -s ${extras[$N]}.species ]] ||
          HELP $* "\nUnknown extras option:\n\t-$OPT ${EE[$N]}"
      done;;
  q|v);;
    h)HELP $*;;
    *)HELP $* "\nUnknown $ERGO option:\n\t-$OPT $OPTARG" ;;
    esac
  done
};GETOPTS $* #-vh

case $run in
EmChem09)
  echo "RUN $run chosen"
  spcs=( EmChem09base $Aero PMmass Ash)
  rcns=( EmChem09base $Aero PMmass Ash)
  bics=( EmChem09base )
;;
EmChem09soa)
  echo "RUN $run chosen."
  spcs=( $xdir/EmChem09base $xdir/$Aero $xdir/Ash \
          ./VBS_nonvolatile ../ZCM_vbs_tests/VBS_partitioning )  #  VBS NPNA
#XSOA         ../ZCM_vbs_tests/VBS_help    \
  rcns=( $xdir/EmChem09base $xdir/$Aero $xdir/Ash \
         ../ZCM_vbs_tests/VBS_SOAformation ../ZCM_vbs_tests/VBS_SOAageing \
          ./VBS_emissions_nonvolatilePOA_FromPM25  ) # VBS NPNA
  bics=( $xdir/EmChem09base )  # No special SOA BICs (yet)
;;
# Updated rates with MCM (and PAN correction). Assume SOA wanted
EmChem16a)
  echo "RUN $run chosen."
  spcs=( ${run}base Aero2017nx $xdir/Ash \
          $xdir/ForestTracers \
          VBS_nonvolatile ../ZCM_vbs_tests/VBS_partitioning )  #  VBS NPNA
  rcns=( ${run}base Aero2017nx $xdir/Ash \
          $xdir/ForestTracers \
	 ${run}BVOC \
         VBS_SOAformationY ../ZCM_vbs_tests/VBS_SOAageing \
#Y         ../ZCM_vbs_tests/VBS_SOAformation ../ZCM_vbs_tests/VBS_SOAageing \
         ../ZCM_EmChem09soa/VBS_emissions_nonvolatilePOA_FromPM25  ) # VBS NPNA
  bics=( ${run}base )
  #bics=( $x16a/EmChem16abase )  # No special SOA BICs (yet)
  #rcns=( ${run}base $xdir/$Aero \  #$xdir/PMmass )
;;
EmChem09ecom)
  echo "RUN $run chosen."
  sdir=$PWD/ZCM_EmChem09soa
  echo "SOA DIR ", $sdir
  spcs=( $xdir/EmChem09base \
         $xdir/$Aero \
         ../ZCM_vbs_tests/VBS_help    \
          $sdir/VBS_nonvolatile ../ZCM_vbs_tests/VBS_partitioning )  #  VBS NPNA
  rcns=( $xdir/EmChem09base \
         $xdir/$Aero \
         ../ZCM_vbs_tests/VBS_SOAformation ../ZCM_vbs_tests/VBS_SOAageing \
          ./EC_OM  )
  bics=( $xdir/EmChem09base )  # No special SOA BICs (yet)
;;
CRIv2R5jpc)
  echo "RUN $run chosen"
  spcs=( ${run}base $xdir/$Aero \
         ./CRIv2R5jpc_nonvolatile ./Hodzic_VBSpartitioning )
  rcns=( ${run}base ./CRIv2R5jpc_BVOC $xdir/$Aero \
         ./Hodzic_VBSformation ./VBS_emissions_nonvolatilePOA_FromPM25 )
  bics=( ${run}base )
;;
CRI_v2_R5)
  echo "RUN $run chosen"
  spcs=( ${run}base $xdir/$Aero $xdir/PMmass )
  rcns=( ${run}base $xdir/$Aero $xdir/PMmass )
  bics=( ${run}base )
;;
CRI_v2_0)
  echo "RUN $run  chosen"
  spcs=( ${run}base $xdir/PMmass )
  rcns=( ${run}base $xdir/PMmass )
  bics=( ${run}base )
;;
CB05)
  echo "RUN $run chosen"
  spcs=( ${run}base $xdir/PMmass )
  rcns=( ${run}base $xdir/PMmass )
  bics=( ${run}base )
;;
CB04)
  echo "RUN $run chosen"
  spcs=( ${run}base $xdir/PMmass )
  rcns=( ${run}base $xdir/PMmass )
;;
OSRM)
  echo "RUN $run chosen"
  spcs=( ${run}base $xdir/PMmass )
  rcns=( ${run}base $xdir/PMmass )
;;
Emergency)
  echo "RUN $run chosen"
  spcs=( Eemep $run)
  rcns=( Eemep $run)
;;
Pollen)
  echo "RUN $run chosen"
  spcs=( ../ZCM_Emergency/Eemep $run)
  rcns=( ../ZCM_Emergency/Eemep $run)
;;
*)
  echo "SELECTION of run $run failed!! "
  exit
;;
esac

# Add the usual common stuff
spcs=("${spcs[@]}" "${extras[@]}")
rcns=("${rcns[@]}" "${extras[@]}")
bics=("${bics[@]}" "${extras[@]}")

echo "NEW SPECS ", ${spcs[@]}
echo "NEW REACTIONS ", ${rcns[@]}
echo "NEW BICS ", ${bics[@]}

#VBS
#run=vbs_tests   # VBS based Organic Aerosol Model, different versions use different spcs and rcns, choose one set below

#VBS NPAS (Nonvolatile POA, VBS for SOA formation and aging of SOA) Try using the "standard" EmChem09soa instead!!
#  spcs=( ../ZCM_EmChem09/EmChem09base ../ZCM_EmChem09/SeaSalt \
#         ../ZCM_EmChem09/Dust ../ZCM_vbs_tests/VBS_help_Detailed \
#         ./VBS_nonvolatile ../ZCM_vbs_tests/VBS_partitioning_Detailed )  #  VBS NPNA
#  rcns=( ../ZCM_EmChem09/EmChem09base ../ZCM_EmChem09/SeaSalt \
#         ../ZCM_vbs_tests/VBS_SOAformation_Detailed ../ZCM_vbs_tests/VBS_SOAageing_Detailed \
#         ./VBS_emissions_nonvolatilePOA  ) # VBS NPNA


# VBS-PAA (VBS based primary emissions and aging of all POA and SOA)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS PAA
#rcns=( ../ZCM_EmChem09/EmChem09base VBS_SOAformation_Detailed VBS_POAageing VBS_SOAageing_Detailed VBS_emissions_partitioningPOA  ) # VBS PAA

# VBS PAP (VBS based primary emissions and aging of all POA)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS PAP
#rcns=( ../ZCM_EmChem09/EmChem09base VBS_SOAformation_Detailed VBS_POAageing VBS_emissions_partitioningPOA  ) # VBS PAP

# VBS PAPA (VBS based primary emissions and aging of all POA and ASOA, note! not same ageing rate as in VBS PAA!)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS PAPA
#rcns=( ../ZCM_EmChem09/EmChem09base VBS_SOAformation_Detailed VBS_POAageing VBS_ASOAageing VBS_emissions_partitioningPOA  ) # VBS PAPA

#VBS NPNA (VBS for SOA formation, no ageing reactions and only nonvolatile POA)
#spcs=( ../ZCM_EmChem09/EmChem09base VBS_help_Detailed VBS_nonvolatile VBS_partitioning_Detailed )  #  VBS NPNA
#rcns=( ../ZCM_EmChem09/EmChem09base  VBS_SOAformation_Detailed VBS_emissions_nonvolatilePOA  ) # VBS NPNA

#---------------- create GenIn files...
cdir=$PWD       #  Current when starting. Assumed now as a Unimod
wdir=$PWD/ZCM_$run   # work-directory, with input files
cd $wdir
echo "CDIR $cdir"
echo "WDIR $wdir"
sleep 1
#
mv GenIn.species GenIn.species.bk # Safety
echo "Species Files:" > CM_chempackages.txt
for FF in ${spcs[@]}; do
  if [[ -s $FF.species ]];then
    echo "+ SPECIES  FILE" $FF
  echo -n " $spec" >> CM_chempackages.txt
    cat $FF.species  >> GenIn.species
  else
    echo "MISSING SPECIES  FILE" $FF
  fi
done
echo " " >> CM_chempackages.txt

# Reactions
mv GenIn.reactions GenIn.reactions.bk
echo "Reaction Files:" >> CM_chempackages.txt

for FF in ${rcns[@]}; do
  if [[ -s $FF.reactions ]];then
    echo "+ REACTION FILE" $FF
  echo -n " $reac" >> CM_chempackages.txt
    cat $FF.reactions >> GenIn.reactions
  fi
done
echo " " >> CM_chempackages.txt
# ==========================================
echo "!---- Boundary conditions -------" >  CM_BoundaryConditions.inc
for FF in ${bics[@]}; do
  if [[ -s $FF.BoundaryConditions ]];then
    echo "+ BIC FILE" $FF
    echo "!---- SECTION BICs $bic" >> CM_BoundaryConditions.inc
    cat $FF.BoundaryConditions     >> CM_BoundaryConditions.inc
  fi
done
echo " " >> CM_BoundaryConditions.inc
# ==========================================


# 1) Runs GenChem to get chemical mechanism
#######################################################################

if [[ "$VERB" = 'quiet' ]];then
  $cdir/GenChem.pl >/dev/null 2>&1
else
  $cdir/GenChem.pl
fi

# Mar 17th 2009, added fake GenSpec_bgn_mod

#odir=$PWD/ZCM_$run   # We keep output in work-directory
odir=$wdir           # We keep output in work-directory
echo $odir

cat GenOut_ChemRates*_mod.inc            > $odir/CM_ChemRates_mod.f90
cat GenOut_Chem{Spec*,Chemicals}_mod.inc > $odir/CM_ChemSpecs_mod.f90
cat GenOut_ChemGroups_mod.f90            > $odir/CM_ChemGroups_mod.f90

# ../DUMMY_Spec_bgn_mod \

#mv GenOut_SOA_mod.f90 $odir/CM_SOA_mod.f90
#mv ChemSOA_mod.f90 $odir/CM_SOA_mod.f90

mv GenOut_AerExt.inc      $odir/CM_AerExt.inc
mv GenOut_Reactions1.inc  $odir/CM_Reactions1.inc
mv GenOut_Reactions2.inc  $odir/CM_Reactions2.inc
mv GenOut_DryDep.inc      $odir/CM_DryDep.inc
mv GenOut_EmisSpecs.inc   $odir/CM_EmisSpecs.inc
mv GenOut_EmisBioNat.inc  $odir/CM_EmisBioNat.inc
mv GenOut_EmisFile.inc    $odir/CM_EmisFiles.inc
mv GenOut_WetDep.inc      $odir/CM_WetDep.inc

#rm GenOut_*                # Clean up current directory
#mv Log.GenOut  $odir/Log.$run

for i in $odir/CM*; do
    filename=`basename $i`
    cp_if_diff $i $cdir/$filename
done

# FINNv1 or GFED:
echo ${ffires};
cp_if_diff $odir/BiomassBurning_${ffires}_to_$run.inc $cdir/BiomassBurningMapping.inc  # Special
cd $cdir

# Skipped now:
# 2) Copies Boundary Condition files
#######################################################################
# This file needs creating by hand
#cp BoundaryConditions.$run   $odir/CM_BoundaryConditions.inc

# 3) Run GenVOC to get speciation
#######################################################################
#Now done by Garry
#cd ..
#GenVOC.pl $run
