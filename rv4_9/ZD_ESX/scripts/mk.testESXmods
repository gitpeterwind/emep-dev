
# Many of the ESX modules come with a test programme at the end, commented
# out with !TSTESX. Here we create a  test prog from this, and run the
# scripts/mk.Makefile to generate a Makefile for that module.
#
# Usage mk.testESXmods prog 
# Test if any argument supplied:
# (-z will test if the expansion of "$1" is a null string or not)

if [ -z "$1" ]; then
  echo "No argument supplied! "
  echo " "
  echo "  Usage: scripts/mk.ESXmods  TestProg.f90"
  echo " "
  echo "   e.g.: scripts/mk.ESXmods  BioEmis.f90"
  exit 1
fi

tstfile=zztest_$1
tstbase=`basename $tstfile .f90`
tstmakefile=${tstbase}_Makefile

rm $tstfile $tstbase $tstmakefile   # CLEAR OLD STUFF

echo "====== This script tests: " $tstfile 
sleep 2


grep "\!TSTESX" $1  > $tstfile
sed -i "s/\!TSTESX//" $tstfile   # Strip commented out !TSTESX lines to get test-prog

make clean
scripts/mk.Makefile $tstfile $tstmakefile

if [ ! -e "$tstmakefile" ]; then
  echo "ERROR creating $tstmakefile :-( "
  echo "Don't know why. You have to check yourself."
  exit 1
fi

echo "====== Created " $tstmakefile 
sleep 2

# Try compilation:

echo "====== Compiling with " $tstmakefile 
make -f  $tstmakefile

if [ ! -e "$tstbase" ]; then
   if [ -e "$tstbase.exe" ]; then # we see if this is cygwin
      tstbase=$tstbase.exe
   fi
fi

if [ ! -e "$tstbase" ]; then
  echo "ERROR with make -f $tstmakefile :-( "
  echo "Don't know why. You have to check yourself."
  exit 1
fi

# Run :-)

sleep 2
echo " "
echo "====== Running " $tstbase 
echo " "
if [ -e "$tstbase" ]; then
  ./$tstbase
fi


